import { type NextPage } from "next";
import { useCallback, useState } from "react";
import Head from "next/head";
import { api } from "~/utils/api";

import { Spinner } from "~/components/spinner";

const Home: NextPage = () => {
  const mutation = api.query.query.useMutation();

  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  // const [sources, setSources] = useState<
  //   {
  //     source: string;
  //   }[]
  // >([]);

  const onInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      setQuestion(e.target.value);
    },
    []
  );

  const handleKeyDown = useCallback(
    async (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === "Enter") {
        if (question === "") {
          return;
        }
        const response = await mutation.mutateAsync({ query: question });
        console.log(response.parsedQuery);
        const answer = response.parsedQuery.text;
        setAnswer(answer);

        // const sources = response.parsedQuery.sourceDocuments.map((document) => {
        //   const { metadata } = document;
        //   return {
        //     source: metadata.source,
        //   };
        // });
        // setSources(sources);
      }
    },
    [question, mutation]
  );

  const renderAnswer = () => {
    if (mutation.isLoading) {
      return (
        <div className="mt-12 flex justify-center">
          <Spinner className="h-20 w-20" />
        </div>
      );
    } else {
      const answerKeywords = answer.split(" ");
      const keywordIndex = answerKeywords.findIndex(
        (keyword) =>
          keyword.includes("class") ||
          keyword.includes("let") ||
          keyword.includes("const")
      );
      const semicolonIndex = answerKeywords.findLastIndex(
        (keyword) => keyword.includes(";") || keyword.includes("}")
      );

      if (keywordIndex !== -1 && semicolonIndex !== -1) {
        const answerSnippet = answerKeywords.slice(0, keywordIndex).join(" ");
        const codeSnippet = answerKeywords
          .slice(keywordIndex + 1, semicolonIndex + 1)
          .join(" ");
        console.log(codeSnippet);
        return (
          <div className="mt-12 w-1/2">
            <p className="text-2xl">{answerSnippet}</p>
            <code className="text-2xl text-sky-500">{codeSnippet}</code>
          </div>
        );
      }

      return (
        <div className="mt-12 w-1/2">
          <p className="text-2xl">{answer}</p>
          {/* <ul className="mt-12">
            {sources.map((source) => {
              return (
                <Link key={source.source} href={source.source}>
                  <li className="text-xl hover:text-sky-500">
                    {source.source}
                  </li>
                </Link>
              );
            })}
          </ul> */}
        </div>
      );
    }
  };

  return (
    <>
      <Head>
        <title>SnarkyJS Oracle</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen  flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 "></div>
        <h1 className="text-6xl ">Ask a question about SnarkyJS!</h1>
        <div className="mt-12 w-1/2">
          <label htmlFor="question" className="mb-2 block text-sm font-medium ">
            Ask your question
          </label>
          <input
            type="text"
            id="question"
            className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500"
            placeholder="Type here..."
            required
            onChange={onInputChange}
            value={question}
            onKeyDown={(e) => void handleKeyDown(e)}
          />
        </div>
        {renderAnswer()}
      </main>
    </>
  );
};

export default Home;
